# -*- coding: utf-8 -*-
"""KDD.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vMk1x-nkGVjsoe14aCeGCib8U2fVid4t
"""

import matplotlib.pyplot as plt
import pandas as pd
import tensorflow as tf
import seaborn as sns
import numpy as np
from  numpy import genfromtxt
from sklearn import svm
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import (accuracy_score,confusion_matrix)
from sklearn.metrics import roc_curve

df = pd.read_csv("/content/KDDTrain+.txt", delimiter=',')
df.head()

# df['ftp_data'].unique()
# #70 differente columns so we don't need that column 
# df.drop('ftp_data',axis=1,inplace=True)

df.shape

df.describe()

df.describe(include="O")

#categorique sdata and nemerique data
cat_data=[]
num_data=[]
for i,c in enumerate(df.dtypes):
  if c==object:
    cat_data.append(df.iloc[:,i])
  else :
    num_data.append(df.iloc[:,i])
cat_data=pd.DataFrame(cat_data)
num_data=pd.DataFrame(num_data)

cat_data.isnull().sum().any()

cat_data=cat_data.T

target=cat_data['normal']
cat_data.drop('normal',axis=1,inplace=True)

for i in range(len(target)):
  if target[i]!='normal':
    target[i]=0
  else :
    target[i]=1

target

le=LabelEncoder()
for i in cat_data:
  cat_data[i]=le.fit_transform(cat_data[i])
cat_data

num_data=num_data.T

x=pd.concat([cat_data,num_data],axis=1)
y=target

y.value_counts()

plt.figure(figsize=(8,6))
sns.countplot(y)
yes=target.value_counts()[0]/len(y)
no=target.value_counts()[1]/len(y)
print(f'le pourcentage des normal trafic est:{yes}')
print(f'le pourcentage des Anormal trafic est:{no}')

scaler=StandardScaler()
X_scaled=scaler.fit_transform(x)
X_scaled

X_scaled.shape

X_train,X_test,y_train,y_test=train_test_split(X_scaled, y,test_size=0.2,random_state=42)



X_train = np.asarray(X_train).astype(np.float32)
X_test = np.asarray(X_test).astype(np.float32)
y_train = np.asarray(y_train).astype(np.float32)
y_test = np.asarray(y_test).astype(np.float32)

X_test.shape

y_test.shape

X_train.shape

#construction de reseau de neuron
model=tf.keras.Sequential()

model.add(tf.keras.layers.Dense(units=20,activation='relu',kernel_initializer='uniform',input_dim=42))

model.add(tf.keras.layers.Dense(units=1,activation='sigmoid',kernel_initializer='uniform'))

model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['binary_accuracy'])

model.summary()

model.fit(X_train,y_train,batch_size=1000,epochs=1000)

test_loss,test_accuracy=model.evaluate(X_test,y_test)

print(f'test accuracy est:{test_accuracy} et test loss {test_loss}')

y_pred=model.predict(X_test)



y_pred[40]

y_test[40]

plt.scatter(y_test,y_pred)
plt.show()